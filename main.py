#!/usr/bin/env python3
import argparse
import os
from datetime import datetime, timedelta
import subprocess
from pathlib import Path
import threading
import time
import re

class Task:
    def __init__(self, title: str, due_date: str = None, priority: str = "medium", category: str = "personal"):
        self.title = title
        self.due_date = due_date
        self.priority = priority
        self.category = category
        self.completed = False
        self.created_at = datetime.now().strftime("%Y-%m-%d %H:%M")

    def to_string(self) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–∞–¥–∞—á—É –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        completed_mark = "+" if self.completed else "-"
        due_str = f" due:{self.due_date}" if self.due_date else ""
        return f"{completed_mark}|{self.created_at}|{self.priority}|{self.category}|{self.title}{due_str}"

    @classmethod
    def from_string(cls, line: str) -> 'Task':
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–º |
            completed_mark, created_at, priority, category, *title_parts = line.strip().split('|')
            title_full = '|'.join(title_parts)  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º title, –µ—Å–ª–∏ –≤ –Ω–µ–º –±—ã–ª–∏ |
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            due_match = re.search(r'due:(\S+)', title_full)
            if due_match:
                title = title_full[:due_match.start()].strip()
                due_date = due_match.group(1)
            else:
                title = title_full.strip()
                due_date = None

            task = cls(title)
            task.due_date = due_date
            task.priority = priority
            task.category = category
            task.completed = completed_mark == "+"
            task.created_at = created_at
            return task
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {line}")
            print(f"–ü—Ä–∏—á–∏–Ω–∞: {e}")
            return None

class QuickDo:
    def __init__(self):
        self.config_dir = Path.home() / ".quickdo"
        self.tasks_file = self.config_dir / "tasks.txt"
        self.reminders_file = self.config_dir / "reminders.txt"
        self.setup_files()
        self.tasks = self.load_tasks()

    def setup_files(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã"""
        self.config_dir.mkdir(exist_ok=True)
        self.tasks_file.touch(exist_ok=True)
        self.reminders_file.touch(exist_ok=True)

    def load_tasks(self) -> list:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        tasks = []
        if self.tasks_file.exists():
            with open(self.tasks_file, 'r', encoding='utf-8') as f:
                for line in f:
                    if line.strip():
                        task = Task.from_string(line)
                        if task:
                            tasks.append(task)
        return tasks

    def save_tasks(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª"""
        with open(self.tasks_file, 'w', encoding='utf-8') as f:
            for task in self.tasks:
                f.write(task.to_string() + '\n')

    def add_task(self, title: str, due_date: str = None, priority: str = "medium", category: str = "personal"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        task = Task(title, due_date, priority, category)
        self.tasks.append(task)
        self.save_tasks()
        print(f"[‚úî] –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: \"{title}\" [—Å—Ä–æ–∫: {due_date or '–Ω–µ —É–∫–∞–∑–∞–Ω'}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}]")

    def list_tasks(self, show_completed: bool = False):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
        if not self.tasks:
            print("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            return

        print("üïí –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:")
        for i, task in enumerate(self.tasks, 1):
            if task.completed and not show_completed:
                continue
            
            priority_symbols = {"high": "‚ùó", "medium": "‚ñ™", "low": "¬∑"}
            priority_symbol = priority_symbols.get(task.priority, "‚ñ™")
            status = "‚úì" if task.completed else "-"
            due_str = f" [{task.due_date}]" if task.due_date else ""
            category_str = f"[{task.category}]"
            
            print(f"{i}. [{status}] {priority_symbol} {task.title} {category_str}{due_str}")

    def complete_task(self, task_id: int):
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        if 1 <= task_id <= len(self.tasks):
            task = self.tasks[task_id - 1]
            task.completed = True
            self.save_tasks()
            print(f"[‚úî] –ó–∞–¥–∞—á–∞ \"{task.title}\" –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")

    def format_reminder(self, message: str, time_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return f"{time_str}|{message}"

    def save_reminder(self, message: str, time_str: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        with open(self.reminders_file, 'a', encoding='utf-8') as f:
            f.write(self.format_reminder(message, time_str) + '\n')

    def notify(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            subprocess.run(["notify-send", "QuickDo", message])
        except FileNotFoundError:
            print(f"üîî {message}")

    def remind(self, message: str, delay: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        def parse_delay(delay_str: str) -> int:
            unit = delay_str[-1].lower()
            value = int(delay_str[:-1])
            units = {'m': 60, 'h': 3600, 'd': 86400}
            return value * units.get(unit, 60)

        seconds = parse_delay(delay)
        reminder_time = datetime.now() + timedelta(seconds=seconds)
        time_str = reminder_time.strftime("%Y-%m-%d %H:%M")
        
        def reminder_task():
            time.sleep(seconds)
            self.notify(message)

        threading.Thread(target=reminder_task, daemon=True).start()
        self.save_reminder(message, time_str)
        print(f"[‚úî] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: \"{message}\" (—á–µ—Ä–µ–∑ {delay})")

    def report(self, period: str = "week"):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º"""
        now = datetime.now()
        if period == "week":
            start_date = now - timedelta(days=7)
        elif period == "day":
            start_date = now - timedelta(days=1)
        else:
            print("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞")
            return

        completed = 0
        remaining = 0
        categories = {}

        for task in self.tasks:
            task_date = datetime.strptime(task.created_at, "%Y-%m-%d %H:%M")
            if task_date >= start_date:
                if task.completed:
                    completed += 1
                else:
                    remaining += 1
                
                categories[task.category] = categories.get(task.category, 0) + 1

        print(f"üìä –û—Ç—á—ë—Ç –∑–∞ {period}:")
        print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed} –∑–∞–¥–∞—á")
        print(f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining} –∑–∞–¥–∞—á")
        print("\n–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, count in categories.items():
            print(f"- {category}: {count} –∑–∞–¥–∞—á")

def main():
    parser = argparse.ArgumentParser(description="QuickDo - –ø—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏")
    subparsers = parser.add_subparsers(dest="command", help="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")

    # Add task
    add_parser = subparsers.add_parser("add", help="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    add_parser.add_argument("title", help="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    add_parser.add_argument("--due", help="–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (YYYY-MM-DD)")
    add_parser.add_argument("--priority", choices=["low", "medium", "high"], default="medium", help="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
    add_parser.add_argument("--category", default="personal", help="–ö–∞—Ç–µ–≥–æ—Ä–∏—è")

    # List tasks
    list_parser = subparsers.add_parser("list", help="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏")
    list_parser.add_argument("--all", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")

    # Complete task
    complete_parser = subparsers.add_parser("complete", help="–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é")
    complete_parser.add_argument("task_id", type=int, help="–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")

    # Remind
    remind_parser = subparsers.add_parser("remind", help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    remind_parser.add_argument("message", help="–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    remind_parser.add_argument("--in", dest="delay", help="–ß–µ—Ä–µ–∑ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2h, 30m, 1d)")

    # Report
    report_parser = subparsers.add_parser("report", help="–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á—ë—Ç")
    report_parser.add_argument("period", choices=["day", "week"], default="week", help="–ü–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–∞")

    args = parser.parse_args()
    quickdo = QuickDo()

    if args.command == "add":
        quickdo.add_task(args.title, args.due, args.priority, args.category)
    elif args.command == "list":
        quickdo.list_tasks(args.all)
    elif args.command == "complete":
        quickdo.complete_task(args.task_id)
    elif args.command == "remind":
        quickdo.remind(args.message, args.delay)
    elif args.command == "report":
        quickdo.report(args.period)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
